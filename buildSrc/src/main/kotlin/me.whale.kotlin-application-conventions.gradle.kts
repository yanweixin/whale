import java.io.IOException
import java.net.ServerSocket

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    // Apply the common convention plugin for shared build configuration between library and application projects.
    id("me.whale.kotlin-common-conventions")

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

application {
    applicationDefaultJvmArgs = listOf(
        "-Dfile.encoding=UTF-8", "-Xms128m", "-Xmx512m",
        "-XX:+HeapDumpOnOutOfMemoryError", "-XX:HeapDumpPath=./java_pid<pid>.hprof", "-XX:+UseGCOverheadLimit",
        "-XX:+UseDynamicNumberOfGCThreads", "-XX:+UseZGC",
        "-Xlog:gc*:file=./build/%p_gc.log::filecount=10,filesize=100M"
    )
}

tasks.withType<JavaExec> {
    environment("APP_NAME", project.name)
    val debugPort = getAvailablePort(project.name)
    println("start debug app ${project.name} with task $name on port $debugPort")
    debugOptions {
        enabled.set(true)
        server.set(true)
        suspend.set(false)
        port.set(debugPort)
    }
}

fun getAvailablePort(appName: String): Int? {
    if (!rootProject.extra.has("DEBUG_PORT")) {
        rootProject.extra.set("DEBUG_PORT", mutableMapOf<String, Int>())
    }
    val props = rootProject.extra.get("DEBUG_PORT") as MutableMap<String, Int>
    if (props.containsKey(appName)) {
        return props[appName]
    }
    for (port in 5005..5025) {
        if (props.containsValue(port)) {
            continue
        }
        try {
            ServerSocket(port).use { serverSocket ->
                val localPort = serverSocket.localPort
                props[appName] = localPort
                return localPort
            }
        } catch (_: Exception) {
            continue
        }
    }
    throw IOException()
}